#include <ark.h>
//#include <yourWiFiLibrary.h>
/*  example: #include <ESP8266WiFi.h> */

const char* ssid = "yourSSID";
const char* password = "yourWiFiPassword";


/********************************************************************************
* block: 
********************************************************************************/
/*************************************************/
// #ifdef DEBUG_ESP_PORT
// #define DEBUG_MSG(...) DEBUG_ESP_PORT.printf( __VA_ARGS__ )
// #else
// #define DEBUG_MSG(...)
// #endif
/*************************************************/


void checkAPI() {
  /*************************************************/
  ARK::Network devnet = ARK::Constants::Networks::Devnet::model;
<<<<<<< HEAD
  ARK::API::Manager _arkManager(devnet);
/*  ==================================  */

/*  ==================================  */
    char buf[512] = {};
    _arkManager.block("4367122150875693402").description(buf, sizeof(buf));
    Serial.println("blockDescription: ");
    Serial.println(buf);
=======
  ARK::API::Manager arkManager(devnet);
  /*************************************************/

  /*************************************************/
  ARK::Block block = arkManager.block("4367122150875693402");
    Serial.println("block: ");
    Serial.println(block);
>>>>>>> master
    Serial.println("\n=====\n");
    delay(50);
  /*************************************************/


  /*************************************************/
  /*************************************************/
/* needs stream->string size fix for large callbacks */
//  String blocks = arkManager.blocks();
//    Serial.println(blocks);
//    Serial.println();
//    delay(50);
  /*************************************************/
  /*************************************************/


<<<<<<< HEAD
/*  ==================================  */
  const auto blockEpoch = _arkManager.blockEpoch();
=======
  /*************************************************/
  auto blockEpoch = arkManager.blockEpoch();
>>>>>>> master
    Serial.println("blockEpoch: ");
    Serial.println(blockEpoch);
    Serial.println("\n=====\n");
    delay(50);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
    _arkManager.blockHeight().description(buf, sizeof(buf)); 
    Serial.println("blockHeightDescription: ");
    Serial.println(buf);
=======
  /*************************************************/
  auto blockHeight =  arkManager.blockHeight();
    Serial.println("blockHeight: ");
    Serial.println(blockHeight);
>>>>>>> master
    Serial.println("\n=====\n");
    delay(50);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
  const auto blockNethashDescription = _arkManager.blockNethash().description();
    Serial.println("blockNethashDescription: ");
    Serial.println(blockNethashDescription);
=======
  /*************************************************/
  Hash blockNethash = arkManager.blockNethash();
    Serial.println("blockNethash: ");
    Serial.println(blockNethash);
>>>>>>> master
    Serial.println("\n=====\n");
    delay(50);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
  const auto blockFeeArk = _arkManager.blockFee().ark();
    Serial.println("blockFeeArk: ");
    Serial.println(blockFeeArk);
=======
  /*************************************************/
  Balance blockFee = arkManager.blockFee();
    Serial.println("blockFee: ");
    Serial.println(blockFee.ark());
>>>>>>> master
    Serial.println("\n=====\n");
    delay(100);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
    _arkManager.blockFees().description(buf, sizeof(buf));
    Serial.println("blockFeesDescription: ");
    Serial.println(buf);
=======
  /*************************************************/
  ARK::Fees blockFees = arkManager.blockFees();
    Serial.println("blockFees: ");
    Serial.println(blockFees);
>>>>>>> master
    Serial.println("\n=====\n");
    delay(100);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
    const auto blockMilestone = _arkManager.blockMilestone();
=======
  /*************************************************/
  auto blockMilestone = arkManager.blockMilestone();
>>>>>>> master
    Serial.println("blockMilestone: ");
    Serial.println(blockMilestone);
    Serial.println("\n=====\n");
    delay(50);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
    const auto blockRewardArk = _arkManager.blockReward().ark();
    Serial.println("blockRewardArk: ");
    Serial.println(blockRewardArk);
=======
  /*************************************************/
  Balance blockReward = arkManager.blockReward();
    Serial.println("blockReward: ");
    Serial.println(blockReward.ark());
>>>>>>> master
    Serial.println("\n=====\n");
    delay(50);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
    const auto blockSupplyArk = _arkManager.blockSupply().ark();
    Serial.println("blockSupplyArk: ");
    Serial.println(blockSupplyArk);
=======
  /*************************************************/
  Balance blockSupply = arkManager.blockSupply();
    Serial.println("blockSupply: ");
    Serial.println(blockSupply.ark());
>>>>>>> master
    Serial.println("\n=====\n");
    delay(50);
  /*************************************************/

<<<<<<< HEAD
/*  ==================================  */
    _arkManager.blockStatus().description(buf, sizeof(buf));
    Serial.println("blockStatusDescription: ");
    Serial.println(buf);
=======
  /*************************************************/
  auto blockStatus = arkManager.blockStatus();
    Serial.println("blockStatus: ");
    Serial.println(blockStatus);
>>>>>>> master
    delay(50);
  /*************************************************/
}
/*************************************************/


/*************************************************/
extern "C" {
#include "user_interface.h"
}
void reportFreeHeap()
{
  Serial.print("\n\nsystem_get_free_heap_size: ");
  Serial.print(system_get_free_heap_size());
  Serial.println("\n\n");
};
/*************************************************/


/*************************************************/
void check()
{
  checkAPI();
    reportFreeHeap();
  ESP.deepSleep(4294967000);
}
/*************************************************/


/*************************************************/
void setup()
{
  Serial.begin(115200);
<<<<<<< HEAD
    reportFreeHeap();

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED)
    {
      delay(500);
      Serial.print(".");
    }
    Serial.println();
  
    Serial.print("Connected, IP address: ");
    Serial.println(WiFi.localIP());
=======
  reportFreeHeap();

  WiFi.mode(WIFI_STA);
	WiFi.begin(ssid, password);
	while (WiFi.status() != WL_CONNECTED)
	{
		delay(500);
		Serial.print(".");
	}
	Serial.println();

	Serial.print("Connected, IP address: ");
	Serial.println(WiFi.localIP());
>>>>>>> master
  check();
}

void loop() {}
<<<<<<< HEAD
=======
/*************************************************/
>>>>>>> master
